/*! @page ports Ports

@section ports_gen General Comments
The QP-nano framework can be easily adapted to various operating systems, processor architectures, and compilers. Adapting the QP-nano software is called porting and the QP-nano framework has been designed from the ground up to make porting easy.

The QP-nano distribution contains many QP-nano ports, which are organized into the three categories:

- @subpage ports_native "Native Ports" adapt QP-nano to run on bare-metal processors "natively", using one of the built-in kernels (@ref comp_qv "QV" or @ref comp_qk "QK")

- @subpage ports_os "3rd-Party OS Ports" adapt QP-nano to run on top of a 3rd-Party Operating System (OS), such as Windows or Linux.



@section ports_code Port Code Structure
Starting with QP-nano release 5.4.0, **all** available ports are bundled into the QP-nano download, as opposed to being distributed as separate QP Development Kits (QDKs). The main benefit is of this approach is that it greatly reduces chances of mistakes in combining the mainline QP-nano code with various QDKs. The downside is that the QP-nano distribution becomes quite large and that ports cannot be added or updated independently from the QP-nano baseline code.

All ports are located in sub-directories of the <span class="img folder">ports</span> @ref qpn_files "top-level folder", with the hierarchical organization outlined below:

<ul class="tag">
  <li><span class="img folder">ports</span>
  </li>
  <ul class="tag">
    <li><span class="img folder">arm-cm</span> &mdash; Native ports for ARM-Cortex-M (bare-metal) <span class="tag">A</span>
    </li>
    <ul class="tag">
      <li><span class="img folder">qk</span> &mdash; Port to the @ref comp_qk "preemptive QK kernel"
      </li>
      <ul class="tag">
        <li><span class="img folder">arm</span> &mdash; Port to ARM-KEIL toolset
        </li>
        <ul class="tag">
          <li><span class="img folder">dbg</span> &mdash; Debug @ref exa_sec_conf "build configuration"
          </li>
          <li><span class="img folder">rel</span> &mdash; Release build configuration
          </li>
          <li><span class="img folder">spy</span> &mdash; Spy build configuration
          </li>
        </ul>
        <li><span class="img folder">gnu</span> &mdash; Port to GNU toolset
        </li>
        <li><span class="img folder">iar</span> &mdash; Port to IAR toolset
        </li>
      </ul>
    </ul>
    <ul class="tag">
      <li><span class="img folder">qv</span> &mdash; Port to the @ref comp_qv "cooperative QV kernel"
      </li>
      <ul class="tag">
        <li><span class="img folder">arm</span> &mdash; Port to ARM-KEIL toolset
        </li>
        <ul class="tag">
          <li><span class="img folder">dbg</span> &mdash; Debug @ref exa_sec_conf "build configuration"
          </li>
          <li><span class="img folder">rel</span> &mdash; Release build configuration
          </li>
          <li><span class="img folder">spy</span> &mdash; Spy build configuration
          </li>
        </ul>
        <li><span class="img folder">gnu</span> &mdash; Port to GNU toolset
        </li>
        <li><span class="img folder">iar</span> &mdash; Port to IAR toolset
        </li>
      </ul>
    </ul>

    <li><span class="img folder">win32-qv</span> &mdash; Port to Win32-QV (Windows) <span class="tag">B</span>
    </li>
    <li><span class="img folder">posix-qv</span> &mdash; Port to POSIX-QV (Linux, BSD, etc.) <span class="tag">B</span>
    </li>
  </ul>
</ul>

<ul class="tag">
  <li><span class="tag">A</span> **Native Ports** are located in sub-directories named after the CPU architecture, such as <span class="img folder">arm-cm</span> for ARM Cortex-M. Under that directory, the sub-directories <span class="img folder">qk</span> and <span class="img folder">qv</span> contain ports for the @ref comp_qk "QK" and @ref comp_qv "QV" kernels, respectively.
  </li>

  <li><span class="tag">B</span> **Ports for 3rd-party OS** are located in sub-directories named after the OS, such as <span class="img folder">win32-qv</span> for the Win32-QV (Windows with QV-type scheduler).
  </li>
</ul>

@note
Because the QP distribution contains *all* ports, the number of sub-directories and files in the <span class="img folder">ports</span> folder may seem daunting. However, knowing the structure of the <span class="img folder">ports</span> folder, you can simply **delete** the sub-directories that are not interesting to you.


@next{ports_native}
*/
